# name: 'Terraform'

# on:
#   push:
#     branches:
#       - "develop"
#       # - "main"
#   pull_request:
#     branches:
#       - "develop"
#       # - "main"
#     paths-ignore:
#       # - 'main.yml'

#   # 2) 수동 실행(Apply/Destroy)용
#   workflow_dispatch:
#     inputs:
#       action:
#         description: 'Choose the action to run (apply or destroy)'
#         required: true
#         default: 'apply'
#       confirm_destroy:
#         description: 'Type DESTROY to confirm destroy action'
#         required: false
#         default: ''


# env:
#   AWS_REGION: us-west-2   ### set this to your preferred AWS region, e.g. us-west-1 

# jobs:
#   backend_setup:
#     name: 'Setup Terraform Backend'
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v2

#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v1
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ${{ env.AWS_REGION }}

#       - name: Setup Terraform
#         uses: hashicorp/setup-terraform@v1
#         with:
#           terraform_version: '1.8.0'

#       - name: Check and Initialize Terraform Backend
#         run: |
#           #!/bin/bash

#           # AWS 리소스 존재 여부를 확인하는 함수들
#           check_bucket_exists() {
#               BUCKET_NAME="$1"
#               output=$(aws s3 ls "s3://$BUCKET_NAME" 2>&1)
#               if echo "$output" | grep -q 'NoSuchBucket'; then
#                   echo "false"
#               elif echo "$output" | grep -q 'Access Denied'; then
#                   echo "access denied"
#               else
#                   echo "true"
#               fi
#           }

#           check_dynamodb_exists() {
#               TABLE_NAME="$1"
#               output=$(aws dynamodb describe-table --table-name "$TABLE_NAME" 2>&1)
#               if echo "$output" | grep -q 'ResourceNotFoundException'; then
#                   echo "false"
#               elif echo "$output" | grep -q 'AccessDeniedException'; then
#                   echo "access denied"
#               else
#                   echo "true"
#               fi
#           }

#           # Terraform 상태 관리를 위한 S3 버킷과 DynamoDB 테이블 이름
#           S3_BUCKET="ctk-prod-terraform-state"
#           DYNAMODB_TABLE="ctk-prod-terraform-lock"

#           # 버킷과 테이블의 존재 여부를 확인
#           BUCKET_EXISTS=$(check_bucket_exists "$S3_BUCKET")
#           DYNAMODB_EXISTS=$(check_dynamodb_exists "$DYNAMODB_TABLE")

#           # Terraform 명령을 실행할 디렉터리로 이동
#           if [ -d backend ]; then
#               cd backend
#           else
#               echo "Backend directory does not exist. Exiting..."
#               exit 1
#           fi

#           # Terraform 초기화 및 적용
#           if [ "$BUCKET_EXISTS" = "true" ] && [ "$DYNAMODB_EXISTS" = "true" ]; then
#               echo "Both S3 bucket and DynamoDB table exist. Skipping Terraform init."
#           elif [ "$BUCKET_EXISTS" = "access denied" ] || [ "$DYNAMODB_EXISTS" = "access denied" ]; then
#               echo "Access denied when checking resources. Please check your AWS credentials and permissions."
#               exit 1
#           else
#               echo "Initializing Terraform because one or more resources do not exist."
#               terraform init
#               terraform plan
#               terraform apply -auto-approve
#           fi

#   terraform_apply:
#     name: 'Terraform Plan'
#     runs-on: ubuntu-latest
#     needs: backend_setup
#     environment: develop

#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v2

#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v1
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ${{ env.AWS_REGION }}

#       - name: Setup Terraform
#         uses: hashicorp/setup-terraform@v1
#         with:
#           terraform_version: '1.8.0'

#       - name: Terraform Init
#         run: |
#           cd terraform_source
#           terraform init

#       - name: Terraform Plan
#         run: |
#           cd terraform_source
#           terraform plan -out=tfplan -input=false

#       - name: Check for Destructive Changes
#         id: check_destructive
#         run: |
#           cd terraform_source
#           # color 옵션 제거
#           CHANGES=$(terraform show tfplan) || {
#             echo "Error running terraform show:"
#             echo "$CHANGES"
#             exit 1
#           }
          
#           echo "Full terraform plan output:"
#           echo "$CHANGES"
          
#           # 삭제('-') 작업만 확인
#           if echo "$CHANGES" | grep -E '^\s*-' > /dev/null; then
#             echo "Destructive changes detected"
#             echo "has_changes=true" >> $GITHUB_OUTPUT
#           else
#             echo "No destructive changes found"
#             echo "has_changes=false" >> $GITHUB_OUTPUT
#           fi
      
#       - name: Fail if Destructive Changes Detected and Not Confirmed
#         if: steps.check_destructive.outputs.has_changes == 'true'
#         run: |
#           echo "Destructive changes detected..."
#           exit 1
      
#       # - name: Terraform Apply
#       #   if: steps.check_destructive.outputs.has_changes == 'false'
#       #   run: |
#       #     cd terraform_source
#       #     terraform apply -auto-approve tfplan


name: 'Terraform on Azure'

on:
  push:
    branches:
      - "dev"
  pull_request:
    branches:
      - "dev"
    paths-ignore:
      - 'main.yml'
  workflow_dispatch:
    inputs:
      action:
        description: 'Choose the action to run (apply or destroy)'
        required: true
        default: 'apply'
      confirm_destroy:
        description: 'Type DESTROY to confirm destroy action'
        required: false
        default: ''

env:
  AZURE_REGION: Korea Central  # 원하는 Azure 리전으로 변경

jobs:
  backend_setup:
    name: 'Setup Terraform Backend'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          # AZURE_CREDENTIALS 는 JSON 형식으로 Service Principal 정보를 포함해야 합니다.

        # 추가: Terraform이 Service Principal 인증을 사용하도록 ARM 환경변수 설정
      - name: Set ARM environment variables
        run: |
          echo "ARM_CLIENT_ID=${{ fromJson(secrets.AZURE_CREDENTIALS).clientId }}" >> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=${{ fromJson(secrets.AZURE_CREDENTIALS).clientSecret }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ fromJson(secrets.AZURE_CREDENTIALS).tenantId }}" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{ fromJson(secrets.AZURE_CREDENTIALS).subscriptionId }}" >> $GITHUB_ENV


      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: '1.8.0'

      - name: Check and Initialize Terraform Backend
        run: |
          #!/bin/bash
          set -e

          # 백엔드 리소스 이름 설정 (Storage Account 이름은 전역에서 유일해야 하며 소문자여야 합니다)
          RESOURCE_GROUP="rg-terraform-backend"
          STORAGE_ACCOUNT="manoittesttfstate"  # 예: 전역 유일한 이름
          CONTAINER_NAME="tfstate-manoit-blob"
          KEY_NAME="dev/terraform/terraform.tfstate"

          echo "Checking if resource group '$RESOURCE_GROUP' exists..."
          if ! az group exists --name "$RESOURCE_GROUP" | grep -q "true"; then
            echo "Resource group does not exist. Creating it..."
            az group create --name "$RESOURCE_GROUP" --location $AZURE_REGION
          else
            echo "Resource group exists."
          fi

          echo "Checking if storage account '$STORAGE_ACCOUNT' exists..."
          ACCOUNT_EXISTS=$(az storage account show --name "$STORAGE_ACCOUNT" --resource-group "$RESOURCE_GROUP" --query "name" -o tsv 2>/dev/null || echo "")
          if [ -z "$ACCOUNT_EXISTS" ]; then
            echo "Storage account does not exist. Creating it..."
            az storage account create \
              --name "$STORAGE_ACCOUNT" \
              --resource-group "$RESOURCE_GROUP" \
              --location $AZURE_REGION \
              --sku Standard_LRS \
              --encryption-services blob
          else
            echo "Storage account exists."
          fi

          echo "Checking if blob container '$CONTAINER_NAME' exists..."
          CONTAINER_EXISTS=$(az storage container show --account-name "$STORAGE_ACCOUNT" --name "$CONTAINER_NAME" --query "name" -o tsv 2>/dev/null || echo "")
          if [ -z "$CONTAINER_EXISTS" ]; then
            echo "Blob container does not exist. Creating it..."
            az storage container create --account-name "$STORAGE_ACCOUNT" --name "$CONTAINER_NAME"
          else
            echo "Blob container exists."
          fi

          echo "Initializing Terraform backend..."
          if [ -d backend ]; then
            cd backend
            terraform init \
              -backend-config="resource_group_name=$RESOURCE_GROUP" \
              -backend-config="storage_account_name=$STORAGE_ACCOUNT" \
              -backend-config="container_name=$CONTAINER_NAME" \
              -backend-config="key=$KEY_NAME"
          else
            echo "Backend directory does not exist. Exiting..."
            exit 1
          fi

  terraform_plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    needs: backend_setup
    environment: develop

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set ARM environment variables
        run: |
          echo "ARM_CLIENT_ID=${{ fromJson(secrets.AZURE_CREDENTIALS).clientId }}" >> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=${{ fromJson(secrets.AZURE_CREDENTIALS).clientSecret }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ fromJson(secrets.AZURE_CREDENTIALS).tenantId }}" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{ fromJson(secrets.AZURE_CREDENTIALS).subscriptionId }}" >> $GITHUB_ENV


      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: '1.8.0'

      - name: Terraform Init
        run: |
          cd terraform_source
          terraform init \
            -backend-config="resource_group_name=rg-terraform-backend" \
            -backend-config="storage_account_name=manoittesttfstate" \
            -backend-config="container_name=tfstate-manoit-blob" \
            -backend-config="key=dev/terraform/terraform.tfstate"

      - name: Terraform Plan
        run: |
          cd terraform_source
          terraform plan -out=tfplan -input=false

      - name: Check for Destructive Changes
        id: check_destructive
        run: |
          cd terraform_source
          CHANGES=$(terraform show tfplan) || {
            echo "Error running terraform show:"
            exit 1
          }
          echo "Full terraform plan output:"
          echo "$CHANGES"
          if echo "$CHANGES" | grep -E '^\s*-' > /dev/null; then
            echo "Destructive changes detected"
            echo "has_changes=true" >> $GITHUB_OUTPUT
          else
            echo "No destructive changes found"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          fi

      - name: Fail if Destructive Changes Detected and Not Confirmed
        if: steps.check_destructive.outputs.has_changes == 'true'
        run: |
          echo "Destructive changes detected. Aborting plan."
          exit 1

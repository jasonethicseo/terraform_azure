name: 'Terraform Apply on Azure'

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Choose the action to run (apply or destroy)'
        required: true
        default: 'apply'
      confirm_destroy:
        description: 'Type DESTROY to confirm destroy action'
        required: false
        default: ''

# 원하는 Azure Region (영문 소문자, 예: eastus, koreacentral 등)
env:
  AZURE_REGION: koreacentral

jobs:
  backend_setup:
    name: 'Setup Terraform Backend'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      # Azure CLI 로그인
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Terraform에서 Service Principal 인증을 사용하기 위해 ARM_* 환경 변수 세팅
      - name: Set ARM environment variables
        run: |
          echo "ARM_CLIENT_ID=${{ fromJson(secrets.AZURE_CREDENTIALS).clientId }}" >> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=${{ fromJson(secrets.AZURE_CREDENTIALS).clientSecret }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ fromJson(secrets.AZURE_CREDENTIALS).tenantId }}" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{ fromJson(secrets.AZURE_CREDENTIALS).subscriptionId }}" >> $GITHUB_ENV

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: '1.8.0'

      - name: Check and Initialize Terraform Backend
        run: |
          #!/bin/bash
          set -e

          # 이 리소스 그룹과 Storage Account, Blob Container를 백엔드로 사용
          RESOURCE_GROUP="rg-terraform-backend"
          STORAGE_ACCOUNT="manoittesttfstate"  # 전역 유일한 소문자 이름
          CONTAINER_NAME="tfstate-manoit-blob"
          KEY_NAME="dev/terraform/terraform.tfstate"

          echo "Checking if resource group '$RESOURCE_GROUP' exists..."
          if ! az group exists --name "$RESOURCE_GROUP" | grep -q "true"; then
            echo "Resource group does not exist. Creating it..."
            az group create --name "$RESOURCE_GROUP" --location $AZURE_REGION
          else
            echo "Resource group exists."
          fi

          echo "Checking if storage account '$STORAGE_ACCOUNT' exists..."
          ACCOUNT_EXISTS=$(az storage account show --name "$STORAGE_ACCOUNT" --resource-group "$RESOURCE_GROUP" --query "name" -o tsv 2>/dev/null || echo "")
          if [ -z "$ACCOUNT_EXISTS" ]; then
            echo "Storage account does not exist. Creating it..."
            az storage account create \
              --name "$STORAGE_ACCOUNT" \
              --resource-group "$RESOURCE_GROUP" \
              --location $AZURE_REGION \
              --sku Standard_LRS \
              --encryption-services blob
          else
            echo "Storage account exists."
          fi

          echo "Checking if blob container '$CONTAINER_NAME' exists..."
          CONTAINER_EXISTS=$(az storage container show --account-name "$STORAGE_ACCOUNT" --name "$CONTAINER_NAME" --query "name" -o tsv 2>/dev/null || echo "")
          if [ -z "$CONTAINER_EXISTS" ]; then
            echo "Blob container does not exist. Creating it..."
            az storage container create --account-name "$STORAGE_ACCOUNT" --name "$CONTAINER_NAME"
          else
            echo "Blob container exists."
          fi

          # 백엔드 디렉토리로 이동하여 terraform init
          if [ -d backend ]; then
            cd backend
          else
            echo "Backend directory does not exist. Exiting..."
            exit 1
          fi

          # terraform init (백엔드 설정)
          echo "Initializing Terraform backend..."
          terraform init \
            -backend-config="resource_group_name=$RESOURCE_GROUP" \
            -backend-config="storage_account_name=$STORAGE_ACCOUNT" \
            -backend-config="container_name=$CONTAINER_NAME" \
            -backend-config="key=$KEY_NAME"

          # 필요 시, 이 단계에서 plan까지 수행할 수 있습니다.
          # terraform plan

terraform_apply:
    name: 'Terraform Apply'
    runs-on: ubuntu-latest
    needs: backend_setup
    environment: develop

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set ARM environment variables
        run: |
          echo "ARM_CLIENT_ID=${{ fromJson(secrets.AZURE_CREDENTIALS).clientId }}" >> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=${{ fromJson(secrets.AZURE_CREDENTIALS).clientSecret }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ fromJson(secrets.AZURE_CREDENTIALS).tenantId }}" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{ fromJson(secrets.AZURE_CREDENTIALS).subscriptionId }}" >> $GITHUB_ENV

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: '1.8.0'

      # main Terraform 코드가 있는 디렉토리로 이동 후 init & plan
      - name: Terraform Init
        run: |
          cd terraform_source
          terraform init \
            -backend-config="resource_group_name=rg-terraform-backend" \
            -backend-config="storage_account_name=manoittesttfstate" \
            -backend-config="container_name=tfstate-manoit-blob" \
            -backend-config="key=dev/terraform/terraform.tfstate"

      - name: Terraform Plan
        run: |
          cd terraform_source
          terraform plan -out=tfplan -input=false

      - name: Check for Destructive Changes
        id: check_destructive
        run: |
          cd terraform_source
          CHANGES=$(terraform show tfplan) || {
            echo "Error running terraform show:"
            echo "$CHANGES"
            exit 1
          }
          echo "Full terraform plan output:"
          echo "$CHANGES"

          # 파괴(`-`) 작업을 감지
          if echo "$CHANGES" | grep -E '^\s*-' > /dev/null; then
            echo "Destructive changes detected"
            echo "has_changes=true" >> $GITHUB_OUTPUT
          else
            echo "No destructive changes found"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          fi

      - name: Fail if Destructive Changes Detected
        if: steps.check_destructive.outputs.has_changes == 'true'
        run: |
          echo "Destructive changes detected..."
          exit 1

      - name: Terraform Apply
        if: steps.check_destructive.outputs.has_changes == 'false'
        run: |
          cd terraform_source
          terraform apply -auto-approve tfplan

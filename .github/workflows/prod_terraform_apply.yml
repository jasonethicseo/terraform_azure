name: 'Terraform Apply'

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Choose the action to run (apply or destroy)'
        required: true
        default: 'apply'
      confirm_destroy:
        description: 'Type DESTROY to confirm destroy action'
        required: false
        default: ''

env:
  AWS_REGION: us-west-2

jobs:
  backend_setup:
    name: 'Setup Terraform Backend'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: '1.8.0'

      - name: Check and Initialize Terraform Backend
        run: |
          #!/bin/bash
          
          check_bucket_exists() {
              BUCKET_NAME="$1"
              output=$(aws s3 ls "s3://$BUCKET_NAME" 2>&1)
              if echo "$output" | grep -q 'NoSuchBucket'; then
                  echo "false"
              elif echo "$output" | grep -q 'Access Denied'; then
                  echo "access denied"
              else
                  echo "true"
              fi
          }

          check_dynamodb_exists() {
              TABLE_NAME="$1"
              output=$(aws dynamodb describe-table --table-name "$TABLE_NAME" 2>&1)
              if echo "$output" | grep -q 'ResourceNotFoundException'; then
                  echo "false"
              elif echo "$output" | grep -q 'AccessDeniedException'; then
                  echo "access denied"
              else
                  echo "true"
              fi
          }

          S3_BUCKET="ctk-prod-terraform-state"
          DYNAMODB_TABLE="ctk-prod-terraform-lock"

          BUCKET_EXISTS=$(check_bucket_exists "$S3_BUCKET")
          DYNAMODB_EXISTS=$(check_dynamodb_exists "$DYNAMODB_TABLE")

          if [ -d backend ]; then
              cd backend
          else
              echo "Backend directory does not exist. Exiting..."
              exit 1
          fi

          if [ "$BUCKET_EXISTS" = "true" ] && [ "$DYNAMODB_EXISTS" = "true" ]; then
              echo "Both S3 bucket and DynamoDB table exist. Skipping Terraform init."
          elif [ "$BUCKET_EXISTS" = "access denied" ] || [ "$DYNAMODB_EXISTS" = "access denied" ]; then
              echo "Access denied when checking resources. Please check your AWS credentials and permissions."
              exit 1
          else
              echo "Initializing Terraform because one or more resources do not exist."
              terraform init
              terraform plan
              # terraform apply -auto-approve
          fi


  terraform_apply:
    name: 'Terraform Apply'
    runs-on: ubuntu-latest
    needs: backend_setup
    environment: develop

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: '1.8.0'

      - name: Terraform Init
        run: |
          cd terraform_source
          terraform init

      - name: Terraform Plan
        run: |
          cd terraform_source
          terraform plan -out=tfplan -input=false

      - name: Check for Destructive Changes
        id: check_destructive
        run: |
          cd terraform_source
          CHANGES=$(terraform show tfplan) || {
            echo "Error running terraform show:"
            echo "$CHANGES"
            exit 1
          }
          
          echo "Full terraform plan output:"
          echo "$CHANGES"
          
          if echo "$CHANGES" | grep -E '^\s*-' > /dev/null; then
            echo "Destructive changes detected"
            echo "has_changes=true" >> $GITHUB_OUTPUT
          else
            echo "No destructive changes found"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Fail if Destructive Changes Detected
        if: steps.check_destructive.outputs.has_changes == 'true'
        run: |
          echo "Destructive changes detected..."
          exit 1
      
      - name: Terraform Apply
        if: steps.check_destructive.outputs.has_changes == 'false'
        run: |
          cd terraform_source
          terraform apply -auto-approve tfplan
